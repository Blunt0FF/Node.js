// Создание middleware-функции

// Создайте новую функцию, которая будет являться вашим middleware. Эта функция должна принимать три параметра: `req` (запрос), `res` (ответ) и `next` (функция для передачи управления следующему middleware или маршруту).
// Внутри функции реализуйте основную логику. Создайте middleware, который будет выводить в консоль информацию о каждом запросе — метод запроса и путь.
// После выполнения этой задачи обязательно вызовите `next()`, чтобы запрос мог продолжить своё движение через цепочку middlewares и дойти до нужного маршрута.
// Подключение middleware к приложению

// Используйте `app.use()` для того, чтобы подключить ваше middleware к приложению.
// Это означает, что middleware будет применяться ко всем запросам, которые приходят на ваш сервер.
// Если необходимо, добавьте обработчик маршрута для тестирования. Например, вы можете создать простой маршрут, который будет отвечать текстом или JSON-объектом на запрос.

// Тестирование middleware

// Запустите ваше приложение, используя команду `node index.js`.
// Отправьте запрос на ваш сервер.
// Обратите внимание на то, что ваше middleware должно выводить информацию в консоль при каждом запросе.


import express from 'express'

const app = express()
app.use(express.json())

const PORT = 3000 

function logRequest (req, res, next){
    console.log(`Method: ${req.method}, url: ${req.url}`)
    next()
}

app.use(logRequest)
app.get('/', (req, res) => {
    res.send('Hello world!')
})

app.get('/result', (req, res) => {
    res.json({message: '123'})
})

app.listen(PORT, () => {
    console.log('Port listening on port 3000')
})